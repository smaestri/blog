{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-12-09-test-unitaires-et-dintegration-avec-spring-boot-le-test-slicing/","result":{"data":{"site":{"siteMetadata":{"title":"Effective Coding"}},"markdownRemark":{"id":"8e612e45-7e7e-5bf3-9f80-67ea08e211c1","excerpt":"Intro Lorsque l’on met en place une application Spring Boot, de nombreuses briques entrent en jeu. Par exemple : la gestion des Contrôleurs REST avec la brique…","html":"<h2>Intro</h2>\n<p>Lorsque l’on met en place une application Spring Boot, de nombreuses briques entrent en jeu. Par exemple : la gestion des Contrôleurs REST avec la brique <a href=\"https://spring.io/guides/gs/rest-service/\">SPRING-WEB</a>; la gestion de la persistance avec la brique <a href=\"https://spring.io/projects/spring-data\">SPRING-DATA</a>, et la base de données sous-jacente ( <a href=\"https://www.mongodb.com/fr\">MongoDB</a> ici); n’oublions pas l’aspect authentification et autorisation via la brique <a href=\"https://spring.io/projects/spring-security\">SPRING-SECURITY</a>. Et on peut imaginer d’autres vu la taille de l’écosystème SPRING!</p>\n<blockquote>\n<p>Comment faire en sorte de tester les différentes briques Spring efficacement, en environnement\nmocké (test unitaire) ou non (test d’intégration).</p>\n</blockquote>\n<p>Nous allons donc voir la technique de <em>test slicing</em> au travers de 2 scénarios, afin d’isoler la brique à tester. Puis nous verrons un scénario de test d’intégration où toutes les briques seront actives!</p>\n<p><strong>Test unitaire brique WEB :</strong> Test de la brique WEB avec <a href=\"https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTest.html\"><em>@WebMvcTest</em></a><em>.</em> Mocking de la brique Sécurité et DATA.</p>\n<p><strong>Test unitaire brique DATA :</strong> Test de la brique DATA avec <a href=\"https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/autoconfigure/data/mongo/DataMongoTest.html\"><em>@DataMongoTest</em></a>. Mocking de la brique WEB et Sécurité. Base locale Mongo en mémoire. Des connaissances de SPRING DATA sont bienvenues, je vous laisse regarder <a href=\"https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#reference\">la doc</a>.</p>\n<p><strong>Test d’intégration final</strong> : tout est démocké et lancement réel du serveur via <a href=\"https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/SpringBootTest.html\"><em>@SpringBootTest</em></a>. Base locale Mongo en mémoire.</p>\n<h2>Présentation de notre cas d’exemple</h2>\n<p>Voici le schéma de l’application que nous allons mettre en place :<figure class=\"wp-block-image\"></p>\n<p><img src=\"https://www.effectivecoding.fr/wp-content/uploads/2019/12/springtest.png\" alt=\"\" class=\"wp-image-118\" srcset=\"https://www.effectivecoding.fr/wp-content/uploads/2019/12/springtest.png 589w, https://www.effectivecoding.fr/wp-content/uploads/2019/12/springtest-300x92.png 300w\" sizes=\"(max-width: 589px) 100vw, 589px\"> </figure></p>\n<ul>\n<li>Un utilisateur authentifié et autorisé appelle un contrôleur REST (<em>/users/123</em>) afin d’obtenir l’adresse d’un autre utilisateur, dont l’identifiant est passé en paramètre. Ce <em>endpoint</em> REST est sécurisé avec SPRING SECURITY : on doit fournir un login + mot de passe en <em>Basic Authentication (détail ci-après).</em></li>\n<li>On va utiliser Mongo pour la persistance. Nous souhaitons que l’utilisateur qui effectue la requête en <em>Basic Authentication</em> soit inscrit dans la base Mongo (table UTILISATEUR). Pour cela, nous mettons en place une implémentation de <a href=\"https://www.baeldung.com/spring-security-authentication-with-a-database\"><em>UserDetailsService</em></a> de Spring Security;</li>\n<li>On va désactiver la gestion de session et la mise en place du JSESSIONID pour plus de simplicité via <em>.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</em></li>\n</ul>\n<p>Voici le code de la configuration Spring Security associé au vue des règles ci-dessus :</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@EnableWebSecurity</span>\n<span class=\"token annotation punctuation\">@EnableGlobalMethodSecurity</span><span class=\"token punctuation\">(</span>prePostEnabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebSecurityConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebSecurityConfigurerAdapter</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">CustomUserDetailsService</span> userService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> http<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\n        http\n            <span class=\"token punctuation\">.</span><span class=\"token function\">httpBasic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">sessionManagement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sessionCreationPolicy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionCreationPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STATELESS</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">csrf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">exceptionHandling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">authorizeRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configureGlobal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationManagerBuilder</span> auth<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        auth<span class=\"token punctuation\">.</span><span class=\"token function\">userDetailsService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">passwordEncoder</span><span class=\"token punctuation\">(</span><span class=\"token function\">passwordEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PasswordEncoder</span> <span class=\"token function\">passwordEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">PasswordEncoder</span> encoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BCryptPasswordEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> encoder<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nous avons donc 2 collections dans Mongo :</p>\n<ul>\n<li>\n<p><em>UTILISATEUR (userId, email, password)</em> : pour la gestion de l’authentification</p>\n</li>\n<li>\n<p><em>CONTACT (userId, address)</em> : stockage des adresses de chaque utilisateur, appelé par contrôleur REST</p>\n</li>\n</ul>\n<p>Passons maintenant dans le vif du sujet,avec l’implémentation de nos trois scénarios de tests.</p>\n<h2>Scénario 1 : Test unitaire brique WEB</h2>\n<p>Dans ce scénario, nous voulons simplement tester notre contrôleur REST, qui fait un simple appel à la base de données Mongo. Voici notre contrôleur REST :</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ContactService</span> contactService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users/{userId}\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userId\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> userId <span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> contactService<span class=\"token punctuation\">.</span><span class=\"token function\">getAdress</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Voici comment on teste cela :</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@WebMvcTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller_Only_Test</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MockMvc</span> mockMvc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ApplicationContext</span> appContext<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// need to mock this beans, will not be used anyway (we use @WithMockUser below)</span>\n    <span class=\"token annotation punctuation\">@MockBean</span>\n    <span class=\"token class-name\">CustomUserDetailsService</span> service<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@MockBean</span>\n    <span class=\"token class-name\">ContactService</span> contactService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token annotation punctuation\">@WithMockUser</span> <span class=\"token comment\">// use with mockMvc only</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// given</span>\n        <span class=\"token class-name\">String</span> userId <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">when</span><span class=\"token punctuation\">(</span>contactService<span class=\"token punctuation\">.</span><span class=\"token function\">getAdress</span><span class=\"token punctuation\">(</span><span class=\"token function\">anyString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">thenReturn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myaddress\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// when + then</span>\n        mockMvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/\"</span> <span class=\"token operator\">+</span> userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">content</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token function\">containsString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myaddress\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Explications :</strong></p>\n<ul>\n<li>On utilise <em>@WebMvcTest(MyController.class)</em> afin d’indiquer à Spring de charger uniquement le contexte WEB;</li>\n<li>Nous utilisons <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/web/servlet/MockMvc.html\"><em>MockMvc</em></a> pour effectuer l’appel REST;</li>\n<li>Sachant que les services SPRING (<em>@Service</em>) ne sont pas chargés, il faut les mocker via l’annotation<a href=\"https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/mock/mockito/MockBean.html\"> <em>@MockBean</em></a></li>\n<li><em>MockMvc</em> va initialiser un contexte de sécurité par défaut du fait que nous ayons déclaré la dépendance SPRING SECURITY. Nous devons donc mocker un utilisateur via <em><a href=\"https://docs.spring.io/spring-security/site/docs/4.2.13.RELEASE/apidocs/org/springframework/security/test/context/support/WithMockUser.html\">@WithMockUser</a></em></li>\n</ul>\n<h2>Scénario 2 : Test unitaire brique DATA</h2>\n<p>Dans ce scénario, nous voulons simplement tester notre repository MONGO. Pour cela, nous devons mettre en place une base locale en mémoire grâce <a href=\"https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo\">à cette librairie</a>. Voici notre repository à tester :</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MongoContactRespository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MongoRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Contact</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Contact</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByUserId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Voici notre test unitaire :</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@DataMongoTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DB_Only_Test</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MongoTemplate</span> mongoTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">MongoContactRespository</span> mongoContactRespository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testWithFrenchIsbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// given</span>\n        <span class=\"token class-name\">Contact</span> contact <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Contact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        contact<span class=\"token punctuation\">.</span><span class=\"token function\">setUserId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        contact<span class=\"token punctuation\">.</span><span class=\"token function\">setAddress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"address1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mongoTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>contact<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// when + then</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Contact</span><span class=\"token punctuation\">></span></span> address <span class=\"token operator\">=</span> mongoContactRespository<span class=\"token punctuation\">.</span><span class=\"token function\">findByUserId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"address1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Explications:</strong></p>\n<ul>\n<li>On utilise <a href=\"https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/autoconfigure/data/mongo/DataMongoTest.html\"><em>@DataMongoTest</em></a> pour notre test; cette annotation va uniquement charger le contexte SPRING DATA.</li>\n<li>On injecte un <a href=\"https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/MongoTemplate.html\"><em>MongoTemplate</em></a> pour initialiser notre jeu de données;</li>\n<li>On injecte notre repository à tester.</li>\n</ul>\n<h2>Scénario 3 : Test d’intégration</h2>\n<p>Pour ce dernier scénario plus complexe, nous allons mettre en place un vrai test d’intégration qui a toutes les briques de SPRING actives : SECURITY, DATA, WEB. Ceci est rendu possible grâce à l’annotation _@SpringBootTest q_ui va charger TOUT le contexte SPRING, comme en conditions réelles!</p>\n<p>Voici notre d’intégration :</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span><span class=\"token punctuation\">(</span>webEnvironment <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringBootTest<span class=\"token punctuation\">.</span>WebEnvironment</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RANDOM_PORT</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ActiveProfiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Full_With_Server_Test</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@LocalServerPort</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TestRestTemplate</span> testRestTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ApplicationContext</span> appContext<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">WebApplicationContext</span> webAppContext<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MongoTemplate</span> mongoTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Before</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// save user who makes authentication</span>\n        <span class=\"token class-name\">Utilisateur</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Utilisateur</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toto\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BCryptPasswordEncoder</span> bCryptPasswordEncoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BCryptPasswordEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> p <span class=\"token operator\">=</span> bCryptPasswordEncoder<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tutu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mongoTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// save contact</span>\n        <span class=\"token class-name\">Contact</span> contact <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Contact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        contact<span class=\"token punctuation\">.</span><span class=\"token function\">setAddress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"adress2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        contact<span class=\"token punctuation\">.</span><span class=\"token function\">setUserId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mongoTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>contact<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getUserAdress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> adress <span class=\"token operator\">=</span> testRestTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">withBasicAuth</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toto\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tutu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:\"</span> <span class=\"token operator\">+</span> port <span class=\"token operator\">+</span> <span class=\"token string\">\"/users/456\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>adress<span class=\"token punctuation\">,</span> <span class=\"token string\">\"adress2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Explications:</strong></p>\n<ul>\n<li>Afin de démarrer un vrai serveur en conditions réelles il faut déclarer : <code class=\"language-text\">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</code> qui va lancer le serveur sur un port aléatoire;</li>\n<li><strong>Très important :</strong> Vu que <code class=\"language-text\">@SpringBootTest</code> charge le contexte SPRING par défaut, il ne faut surtout pas charger la vraie base Mongo mais la base en mémoire. Pour cela il y a plusieurs options, mais dans notre cas, j’ai choisi les <a href=\"https://www.baeldung.com/spring-profiles\">profils SPRING</a>. J’ai déclaré un profil <em>test</em> afin de ne pas charger la configuration réelle de MONGO, mais utiliser la base en mémoire. Voici comment : <code class=\"language-text\">@ActiveProfiles(test)</code> sur la classe de test, et <code class=\"language-text\">@Profile(test)</code> sur la classe de configuration Mongo;</li>\n<li>Initialiser nos jeu de données via l’annotation <code class=\"language-text\">@Before</code> <em>Junit</em> et un <code class=\"language-text\">mongoTemplate</code>;</li>\n<li>Appel de notre service REST via un appel réel réseau et le <a href=\"https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/web/client/TestRestTemplate.html\"><em>TestRestTemplate</em></a>. Ce dernier est idéal car il offre une méthode <code class=\"language-text\">withBasicAuth</code> pour passer l’utilisateur à authentifier via SPRING SECURITY.</li>\n</ul>\n<h2>Conclusion</h2>\n<p>Voici un POST riche où nous avons passés en revus de nombreux concepts fondamentaux du testing avec SPRING. Toute remarque ou commentaire est bienvenue! Comme d’habitude l’ensemble du code source est accessible sur <a href=\"https://github.com/smaestri/springtest\">mon github</a>. Cheers!</p>","frontmatter":{"title":"Tests unitaires et d’intégration avec Spring Boot : le “test slicing”","date":"December 09, 2019","description":null}},"previous":{"fields":{"slug":"/2020-05-02-decouverte-du-framework-cucumber-1-2-introduction-a-bdd/"},"frontmatter":{"title":"Découverte du framework Cucumber (1/2) – Introduction à BDD et exemple pratique"}},"next":{"fields":{"slug":"/2019-10-05-un-beau-spinner-genrique-en-angular/"},"frontmatter":{"title":"Un beau spinner générique en Angular"}}},"pageContext":{"id":"8e612e45-7e7e-5bf3-9f80-67ea08e211c1","previousPostId":"2aa80063-3b5f-532e-b6eb-4bd31bee0f32","nextPostId":"ae3dee56-18f3-5ffc-ac60-86d044a95de9"}},"staticQueryHashes":["2841359383","916993862"],"slicesMap":{}}