{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-05-02-decouverte-du-framework-cucumber-2-2-integration-avec-spring/","result":{"data":{"site":{"siteMetadata":{"title":"Effective Coding"}},"markdownRemark":{"id":"30faab83-518c-5579-8ab0-e82c89f68ba8","excerpt":"Introduction Dans notre première partie, nous avons mis en place un cas simple d’une gestion de Todos avec la méthodologie BDD, et le framework Cucumber…","html":"<h2>Introduction</h2>\n<p>Dans <a href=\"https://www.effectivecoding.fr/index.php/2020/05/02/decouverte-du-framework-cucumber-1-2-introduction-a-bdd/\" target=\"_blank\" rel=\"noopener noreferrer\">notre première partie</a>, nous avons mis en place un cas simple d’une gestion de <em>Todos</em> avec la méthodologie BDD, et le framework <em>Cucumber</em>.</p>\n<p>Cependant nous avons stocké notre liste de <em>Todos</em> en dur, sans passer par une base de données. En contexte d’entreprise, il y a fort à parier qu’on persiste nos Todos dans une base de données, et qu’on utilise Spring pour simplifier cela! Nous allons donc voir dans ce billet comment intégrer Spring avec Cucumber.</p>\n<h2>Mise en place d’une base de données avec <em>Spring-Data</em></h2>\n<p>Nous allons mettre en place un <em>Repository</em> Spring qui va se connecter à la base de données déclarée. Comme vous le savez, Spring Boot se base sur les dépendances Maven (ou autre système de build) pour configurer automatiquement la source de données ( principe <em>convention over configuration)</em>. Ainsi, en déclarant une base <em>HsqlDb</em> dans notre <em>pom.xml,</em> on aura une base opérationnelle en mémoire, et ce automatiquement!</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.hsqldb<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>hsqldb<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.4.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Étant donné que nous sommes dans un contexte BDD, nous allons mettre le scope <em>test</em> pour cette base. Nous allons instancier notre base de données <em>Hsqldb</em> uniquement lors du lancement de notre test Cucumber. On peut imaginer une autre base en condition réelle (hors tests).</p>\n<p>Ensuite, il faut déclarer notre <em>repository</em> qui accédera à la Base de données. On utilise le formalisme <em>Spring-Data</em> pour cela. Si vous voulez plus d’informations au sujet de Spring-Data, c’est par <a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#reference\">ici</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TodoRepository</span>  <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Il faut également modifier notre service, qui appellera notre repository à présent au lieu de la liste statique pas très élégante de notre première partie.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TodoRepository</span> todoRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> description<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todoRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Todo</span><span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> todoRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Intégration de Spring dans Cucumber</h2>\n<p>Maintenant que nous avons mis à jour notre code de production (c’est à dire pas le code de test) à jour pour se connecter à une base de données, il faut maintenant permettre à nos <em>steps</em> d’appeler le contexte Spring et vérifier que la persistance de nos <em>Todos</em> marche bien. Ainsi, il faudra injecter le service <em>TodoService</em>, pour permettre la création d’un <em>Todo</em> à partir d’une Step Cucumber.</p>\n<p>Pour cela, il faut avant tout déclarer la dépendance suivante dans notre <em>pom.xml</em> pour faire le lien entre Cucumber et Spring :</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.cucumber<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>cucumber-spring<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.7.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Pour permettre à Cucumber d’accéder au contexte Spring, il faut indiquer dans la classe <em>TodoSteps</em> : Run_With(SringRunner.class)_, ainsi que l’injection du contexte Spring via l’annotation <em>@SpringBootTest.</em> Pour plus d’informations sur cette annotation, se référer <a href=\"https://www.effectivecoding.fr/index.php/2019/12/09/test-unitaires-et-dintegration-avec-spring-boot-le-test-slicing/\">ici</a>.</p>\n<p>De plus, on injecte dorénavant notre service Spring <em>TodoService</em> directement dans notre classe des Steps. Notre classe des Steps ayant été largement modifiée, je la mets ci-dessous au complet:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoSteps</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">TodoService</span> todoService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">TodoRepository</span> todoRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Given</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ma liste de todos est vide\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@When</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^j'insére un todo avec la description (.*)$\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertAction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> description<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        todoService<span class=\"token punctuation\">.</span><span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Then</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^ma liste contient un todo avec la description (.*)$\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkAction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> description<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span></span> todos <span class=\"token operator\">=</span> todoService<span class=\"token punctuation\">.</span><span class=\"token function\">getTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> todos<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">,</span> todos<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Conclusion</h2>\n<p>Nous avons désormais un test Cucumber qui se greffe au contexte Spring, afin d’ajouter un <em>Todo</em> en base de données, via une requête SQL <em>insert</em>. On vérifie ensuite via une autre requête <em>Select</em> que notre Todo a bien été inséré_._ J’ai affiché les requêtes SQL  dans la console afin que vous constatiez le résultat! L’ensemble du code est accessible <a href=\"https://github.com/smaestri/cucumber-part2\">ici</a>.</p>","frontmatter":{"title":"Découverte du framework Cucumber (2/2) – Intégration avec Spring","date":"May 02, 2020","description":null}},"previous":{"fields":{"slug":"/2020-05-05-les-8-meilleurs-livres-pour-etre-un-developpeur-web-au-top-en-2020/"},"frontmatter":{"title":"Les 8 meilleurs livres pour être un développeur WEB au top en 2020!"}},"next":{"fields":{"slug":"/2020-05-02-decouverte-du-framework-cucumber-1-2-introduction-a-bdd/"},"frontmatter":{"title":"Découverte du framework Cucumber (1/2) – Introduction à BDD et exemple pratique"}}},"pageContext":{"id":"30faab83-518c-5579-8ab0-e82c89f68ba8","previousPostId":"8e09ee42-f8c5-55cb-9e9c-b99f8aa2bf04","nextPostId":"2aa80063-3b5f-532e-b6eb-4bd31bee0f32"}},"staticQueryHashes":["2841359383","916993862"],"slicesMap":{}}