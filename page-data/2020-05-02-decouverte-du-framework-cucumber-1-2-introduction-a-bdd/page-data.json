{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-05-02-decouverte-du-framework-cucumber-1-2-introduction-a-bdd/","result":{"data":{"site":{"siteMetadata":{"title":"Effective Coding"}},"markdownRemark":{"id":"2aa80063-3b5f-532e-b6eb-4bd31bee0f32","excerpt":"Introduction à BDD BDD, ou Behavior Driven Development, est une méthode qui permet une collaboration entre la personne qui énonce le besoin (membre de l’équipe…","html":"<h2>Introduction à BDD</h2>\n<p><em>BDD</em>, ou <em>Behavior Driven Development</em>, est une méthode qui permet une collaboration entre la personne qui énonce le besoin (membre de l’équipe métier ou product-owner en Scrum par exemple), le développeur et le testeur. Dans des applications d’entreprise aux besoins parfois complexes, cette méthode permet de se mettre tous d’accord sur le besoin, et c’est la force principale de BDD.</p>\n<p>Si on compare avec TDD (<em>Test Driven Develoment</em>), une autre méthode de développement qui a fais ses preuves, seul le développeur est maître de la mise en place de la méthode à partir des spécifications (voir mon article à ce sujet). La garantie est sur l’aspect technique, et la couverture de code notamment. BDD se concentre sur la garantie fonctionnelle globale de l’application.</p>\n<p>Comment faire en sorte de mettre tout ce petit monde (product owner, développeur, testeur) d’accord? En se basant sur des scénarios dans une langue naturelle, et c’est ce que nous allons voir, à travers le framework <em>Cucumber</em>.</p>\n<h2>L’écriture des scénarios en BDD</h2>\n<p>L’écriture des scénarios se fait donc en langage naturel mais on se doit de respecter une certaine syntaxe de base.</p>\n<p>Ainsi, on déclare une <em><strong>Feature</strong></em> avec une brève description générale du cas d’utilisation (par exemple gestion d’une Todo Liste).</p>\n<p>On va ensuite déclarer un ou plusieurs <em><strong>Scénarios</strong></em> de cette feature. Par exemple, ajout d’une TODO, suppression d’une TODO, etc.</p>\n<p>Enfin, on décrit notre scénario, en se basant sur 3 mots clés : <em><strong>Given</strong></em>, <em><strong>When</strong></em>, <em><strong>Then.</strong></em> On va prendre l’exemple l’ajout d’un TODO :</p>\n<ul>\n<li><em>Given</em> : indique l’état du système avant l’action (ex. ma liste de Todos est vide);</li>\n<li><em>When</em> : indique l’action effectué par l’utilisateur (ex : j’ajoute une Todo avec la description “Action à faire”);</li>\n<li><em>Then</em> : indique l’état du système après l’action (ex : ma liste de Todos contient <strong><em>un</em></strong> élément avec la description “Action à faire”).</li>\n</ul>\n<p>Cela donne:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">Feature</span><span class=\"token punctuation\">:</span> Gestion d'une liste de todos\n\n  <span class=\"token key atrule\">Scenario</span><span class=\"token punctuation\">:</span> Ajout d'un todo\n    Given ma liste de todos est vide\n    When j'insére un todo avec la description toto\n    Then ma liste contient un todo avec la description toto</code></pre></div>\n<h2>L’écriture des étapes en JAVA</h2>\n<p>La deuxième partie de la mise en place de BDD consiste à écrire les différentes étapes des scénarios ci-dessus en JAVA (en langage <em>Cucumber</em>, on parlera de <em><strong>Glue</strong></em>).</p>\n<p>Pour le <em>given</em>, on initialisera simplement une liste de <em>Todo</em> vide (avec une <em>ArrayList</em> pour faire simple par exemple).</p>\n<p>Pour le <em>when</em>, on appellera la méthode de notre système à tester. Ici, il s’agit de l’ajout d’un TODO, <em>addTodo</em>().</p>\n<p>Pour le <em>then</em>, on vérifiera que notre liste contient un élément. Par exemple avec la librairie <em>Junit</em> et la méthode <em>assertEquals()</em>.</p>\n<p>Cela donne :</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Given</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ma liste de todos est vide\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">TodoService</span><span class=\"token punctuation\">.</span>listTodos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@When</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^j'insére un todo avec la description (.*)$\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertAction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> description<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">TodoService</span><span class=\"token punctuation\">.</span>listTodos<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Todo</span><span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Then</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^ma liste contient un todo avec la description (.*)$\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkAction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> description<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">assrtEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TodoService</span><span class=\"token punctuation\">.</span>listTodos<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TodoService</span><span class=\"token punctuation\">.</span>listTodos<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Comme vous le voyez, on passe la description du <em>Todo</em> à ajouter en paramètre de l’étape. Cela se fait au moyen d’expressions régulières.</p>\n<h2>Lancement de notre test avec le framework Cucumber</h2>\n<p>Ca y’est! on est prêt pour lancer notre premier test Cucumber! On va maintenant coder ensemble le reste de l’application :</p>\n<ul>\n<li>service de gestion des Todos, <em>TodoService.java</em></li>\n<li>classe de test, <em>TodoTest.java</em></li>\n</ul>\n<h3><em>Implémentation du service</em></h3>\n<p>Pour faire simple, on va uniquement créer un service grâce à Spring-Boot et l’annotation <em>@Service.</em></p>\n<p>Ce service nous servira à ajouter un <em>Todo</em>, ou les afficher. Bien entendu en contexte d’entreprise, on souhaite une base de données pour persister nos Todos, avec <em>Spring-Data</em> pour gérer cela par exemple : ce sera l’objet de la 2ème partie de ce tutorial.</p>\n<p>Voici à quoi ressemble notre service:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span></span> listTodos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> description<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listTodos<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Todo</span><span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Comme vous le voyez, on stocke pour l’instant nos <em>Todos</em> dans une liste statique. Ceci est pour test uniquement, on verra dans la deuxième partie, comment améliorer cela!</p>\n<h3><em>Implémentation de la classe de test</em></h3>\n<p>On va déclarer que l’on souhaite utiliser Cucumber pour le lancement de notre test via <em><span class=\"pl-k\">@RunWith</span>(<span class=\"pl-smi\">Cucumber</span><span class=\"pl-k\">.</span>class)</em>. De plus <em><span class=\"pl-k\">@CucumberOptions</span>(<span class=\"pl-c1\">features</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\"></span>src/test/resources<span class=\"pl-pds\"></span></span>)</em> nous permet d’indiquer où se situent nos fichiers <em>feature</em>. Je vous laisse voir la <a href=\"https://docs.cucumber.io/\">doc</a> car on peut paramétrer pas mal de choses, par exemple l’emplacement des <em>steps</em>, la déclaration de plug-ins pour faire de jolis rapports, etc.).</p>\n<p>Cela donne :</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cucumber</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@CucumberOptions</span><span class=\"token punctuation\">(</span>features <span class=\"token operator\">=</span> <span class=\"token string\">\"src/test/resources\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoTests</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Conclusion</h2>\n<p>Et voilà, on vient de voir la mise en place d’un scénario BDD avec le framework Cucumber, dans un exemple simple. Dans la seconde partie, nous verrons un exemple un peu plus complexe, avec l’intégration de Spring dans un test Cucumber et la mise en place d’une base de données locales pour persister nos Todos!</p>\n<p>Comme d’habitude, l’ensemble du code est accessible sur mon github ici : <em><a href=\"https://github.com/smaestri/cucumber-part1\">https://github.com/smaestri/cucumber-part1</a></em></p>","frontmatter":{"title":"Découverte du framework Cucumber (1/2) – Introduction à BDD et exemple pratique","date":"May 02, 2020","description":null}},"previous":{"fields":{"slug":"/2020-05-02-decouverte-du-framework-cucumber-2-2-integration-avec-spring/"},"frontmatter":{"title":"Découverte du framework Cucumber (2/2) – Intégration avec Spring"}},"next":{"fields":{"slug":"/2019-12-09-test-unitaires-et-dintegration-avec-spring-boot-le-test-slicing/"},"frontmatter":{"title":"Tests unitaires et d’intégration avec Spring Boot : le “test slicing”"}}},"pageContext":{"id":"2aa80063-3b5f-532e-b6eb-4bd31bee0f32","previousPostId":"30faab83-518c-5579-8ab0-e82c89f68ba8","nextPostId":"8e612e45-7e7e-5bf3-9f80-67ea08e211c1"}},"staticQueryHashes":["2841359383","916993862"],"slicesMap":{}}