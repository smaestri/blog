{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-04-03-spring-validation-custom-validator/","result":{"data":{"site":{"siteMetadata":{"title":"Effective Coding"}},"markdownRemark":{"id":"4dbc2ed1-e414-577a-9946-fc3d5729ebbb","excerpt":"Introduction La spécification Bean Validation, dont l’implémentation est Hibernate Validator, permet de valider si certains champs sont null, la longueur des…","html":"<h2>Introduction</h2>\n<p>La spécification <a href=\"https://beanvalidation.org/2.0/\">Bean Validation</a>, dont l’implémentation est <a href=\"http://hibernate.org/validator/\">Hibernate Validator</a>, permet de valider si certains champs sont <em>null</em>, la longueur des champs, etc. C’est bien pratique car ça évite de devoir réimplémenter la roue, une seul annotation par exemple <em>@NotNull</em> suffit pour dire que le champ annoté de ne doit pas être <em>null</em>.</p>\n<p>On peut aller plus loin et faire une classe de validation personnalisée. Par exemple, vérifier qu’un mail n’est pas existant en base avant une inscription.</p>\n<p>La spécification nous permet de mettre en place un tel controle personnalisé, c’est ce que nous allons voir en 1/.</p>\n<p>Le problème c’est qu’on souhaite avoir un repository <em>Spring Data</em>  dans cette classe de validation, afin d’interrgoer la base de données. Et là on un soucis, que je vais vous présenter en 2 .\nOn verra deux solutions à ce problème.</p>\n<h2>1 - Mise en place de notre contrôle personnalisé</h2>\n<p>Pour mettre en place notre contrôle de vérification d’e-mail, on va tout d’abord importer la librairie <em>Bean Validation</em> dans le <em>pom.xml</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-validation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Ensuite on va mettre en place une annotation particulière, <em>@EmailExisting</em>, qu’on va placer sur le champ <em>email</em> de notre entité, pour lancer le contrôle. Ce contrôle est stocké dans la classe <em>EmailValidator</em>. L’annotation <em>@Constraint</em> permet le lien entre l’annotation et la classe <em>EmailValidator</em> :</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Constraint</span><span class=\"token punctuation\">(</span>validatedBy <span class=\"token operator\">=</span> <span class=\"token class-name\">EmailValidator</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">METHOD</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FIELD</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">EmailExisting</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"Email already exists\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">groups</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Payload</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">payload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Enfin on code notre controle de vérification d’email, avec la déclaration de notre repository Spring Data pour interroger la base de données:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmailValidator</span> <span class=\"token keyword\">implements</span>\n        <span class=\"token class-name\">ConstraintValidator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">EmailExisting</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> email<span class=\"token punctuation\">,</span>\n                           <span class=\"token class-name\">ConstraintValidatorContext</span> cxt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByEmail</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Il faut aussi déclarer <em>@Valid</em> dans le controlleur MVC REST pour activer la validation:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span> <span class=\"token function\">addUSer</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Valid</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setLastName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">capitalize</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getLastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setFirstName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">capitalize</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getFirstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CREATED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Problème : l’injection du repository est null!</h2>\n<p>Testons cela : lancer le serveur, et appeler le endpoint sur <a href=\"http://localhost:8080/users\">http://localhost:8080/users</a> avec par exemple <a href=\"https://www.postman.com/\">Postman</a>. Il faudra indiquer un <em>requestBody</em> adapté, par exemple :</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\nemail<span class=\"token operator\">:</span> <span class=\"token string\">\"tata@yopmail.com\"</span><span class=\"token punctuation\">,</span>\nfirstName<span class=\"token operator\">:</span> <span class=\"token string\">\"tata\"</span><span class=\"token punctuation\">,</span>\nlastName<span class=\"token operator\">:</span> <span class=\"token string\">\"tata\"</span><span class=\"token punctuation\">,</span>\npassword<span class=\"token operator\">:</span> <span class=\"token string\">\"tatata\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Le contrôle se déclenche deux fois, du fait que nous ayons déclaré la classe <em>User</em> à la fois comme entrée du service REST dans le controlleur, et aussi comme entité JPA correspondant à la table USER. Ainsi, on a 2 validations :</p>\n<ul>\n<li>une première fois dans la couche controlleur par SPRING MVC via l’annotation <em>@Valid</em>. Aucun problème, le controle se passe bien ;</li>\n<li>une deuxième fois lorsque l’on tente de sauvegarder le <em>User</em> via la méthode <em>save()</em> de Spring JPA. On rappelle à nouveau le contrôle d’email, et là le repository devient <em>null</em>, pour une raison que j’ignore! Ca implique une hideuse <em>NullPointerException</em>!</li>\n</ul>\n<p>La solution que l’on va mettre en place va désactiver purement et simplement la validation au moment de la sauvegarde. En effet, on a déjà effectué la validation dans la couche controleur. Il est inutile de le faire une nouvelle fois. Nous allons voir deux méthodes : passer par un DTO, ou utiliser la configuration Spring.</p>\n<h2>Solution 1 : Via un DTO</h2>\n<p>Nous allons divider notre Objet <em>User</em> en 2 :</p>\n<ul>\n<li>un <em>UserDTO</em> correspondant à l’entrée du service;</li>\n<li>un <em>User</em> correspondant à notre entité JPA</li>\n</ul>\n<p>Ainsi, on supprime tous les validator sur l’entité JPA <em>User</em>, et on les garde uniquement sur <em>UserDTO</em>. C’est en général ce qui est fait en entreprise. Vous pouvez voir le code source de cette solution <a href=\"https://github.com/smaestri/poc-spring-validation/tree/solution-1-with-dto\">ici </a>.</p>\n<h2>Solution 2 : Via la configuration Spring</h2>\n<p>Une autre solution, si vous tenez absolument à garder une seule classe <em>User</em>, est tout simplement de désactiver le contrôle lors de l’enregistrement. Ca fait sens, vu qu’on a déjà fait le contrôle juste avant dans la couche Controlleur.</p>\n<p>Il faut ajouter au fichier de configuration Spring Boot <em>application.properties</em> :</p>\n<p><code class=\"language-text\">spring.jpa.properties.javax.persistence.validation.mode=none \n</code></p>\n<p>Et bingo, ça marche cette fois, mais on ne rentre qu’une seule fois dans le controle de validation, via <em>@Valid</em> et Spring MVC.</p>\n<p>Le code est accessible ici :<a href=\"https://github.com/smaestri/poc-spring-validation\">https://github.com/smaestri/poc-spring-validation</a></p>\n<h2>Conclusion</h2>\n<p>Aucune de ces 2 solutions n’est idéale, si vous avez une idée comment injecter le repository et permettre ainsi de valider deux fois avec un seul et même objet <em>User</em>, je suis preneur!</p>\n<p>Cheers,</p>\n<p>PS : Très bons articles qui m’ont été utiles :</p>\n<ul>\n<li><a href=\"https://reflectoring.io/bean-validation-with-spring-boot/\">https://reflectoring.io/bean-validation-with-spring-boot/</a></li>\n<li><a href=\"http://dolszewski.com/spring/custom-validation-annotation-in-spring/\">http://dolszewski.com/spring/custom-validation-annotation-in-spring/</a></li>\n</ul>\n<p>et stackoverflow:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/47245122/spring-hibernate-autowired-is-null-in-constraintvalidator\">https://stackoverflow.com/questions/47245122/spring-hibernate-autowired-is-null-in-constraintvalidator</a></li>\n<li><a href=\"https://stackoverflow.com/questions/36368190/can-i-autowired-one-repository-inside-spring-boot-custom-validator\">https://stackoverflow.com/questions/36368190/can-i-autowired-one-repository-inside-spring-boot-custom-validator</a></li>\n<li><a href=\"https://stackoverflow.com/questions/12676299/spring-3-1-autowiring-does-not-work-inside-custom-constraint-validator\">https://stackoverflow.com/questions/12676299/spring-3-1-autowiring-does-not-work-inside-custom-constraint-validator</a></li>\n<li><a href=\"https://stackoverflow.com/questions/30715795/how-to-inject-spring-bean-into-validatorhibernate\">https://stackoverflow.com/questions/30715795/how-to-inject-spring-bean-into-validatorhibernate</a></li>\n</ul>","frontmatter":{"title":"Spring Boot et Bean Validation : injecter un repository dans un Validator custom","date":"April 02, 2021","description":null}},"previous":null,"next":{"fields":{"slug":"/2021-03-14-react-and-spring-boot/"},"frontmatter":{"title":"Intégrer un frontend React à Spring-Boot"}}},"pageContext":{"id":"4dbc2ed1-e414-577a-9946-fc3d5729ebbb","previousPostId":null,"nextPostId":"914f88ea-dffc-598c-9a94-fcc24e8f0c1c"}},"staticQueryHashes":["2841359383","916993862"],"slicesMap":{}}