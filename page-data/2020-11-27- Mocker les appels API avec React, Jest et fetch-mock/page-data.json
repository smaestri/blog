{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-11-27- Mocker les appels API avec React, Jest et fetch-mock/","result":{"data":{"site":{"siteMetadata":{"title":"Effective Coding"}},"markdownRemark":{"id":"48590086-0905-56cd-a273-fb9ecc6eef3b","excerpt":"Introduction Récemment dans un projet, nous avons souhaité mettre en place des tests unitaires côté front, afin de sécuriser et optimiser le code de l…","html":"<h2>Introduction</h2>\n<p>Récemment dans un projet, nous avons souhaité mettre en place des tests unitaires côté front, afin de sécuriser et optimiser le code de l’application WEB. Notre environnement une application React crée à partir de <a href=\"https://create-react-app.dev/docs/getting-started/\">create-react-app</a>.\nIl n’est pas concevable d’executer les requetes aux APIs, et donc il est nécessaire de mocker la fonction <a href=\"https://developer.mozilla.org/fr/docs/Web/API/Fetch_API\"><em>fetch</em></a> (ou autre appel aynchrone avec la librairie <em>axios</em> par exemple).\nPlusieurs solutions s’offrent à nous pour mocker cette fonction <em>fetch</em>, et donc spécifier une valeur de retour. Pour rappel, cette fonction est asynchrone (une <a href=\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Promise\">promise</a> est retournée)</p>\n<ul>\n<li>Mocker manuellement <code class=\"language-text\">window.mock</code> avec <em>Jest</em>, cependant nous verrons qu’il y a quelques inconvénients;</li>\n<li>Utiliser une librairie externe pour faire cela, nous verrons comment avec la librairie <a href=\"http://www.wheresrhys.co.uk/fetch-mock/\"><em>Fetch-Mock</em></a>;</li>\n<li>Utiliser un serveur de mock par exemple avec <a href=\"https://mswjs.io/\"><em>msw</em></a>, mais je ne voulais pas rentrer dans cette configuration et donc c’est hors scope pour ce post.</li>\n</ul>\n<h2>Mocker manuellement <em>window.mock</em></h2>\n<p>Avec <em>Jest</em>, on peut assez facilement mocker la fonction <code class=\"language-text\">fetch</code>.\nPour ce faire, à chaque fois qu’on lance un test, on a plusieurs options :  mocker le retour de la fonction <code class=\"language-text\">fetch</code> via  <code class=\"language-text\">mockResolvedValue</code>, ou carrément mocker son implémentation via <code class=\"language-text\">mockImplementation</code> (référence : <a href=\"https://jestjs.io/docs/en/mock-function-api\">https://jestjs.io/docs/en/mock-function-api</a>)</p>\n<p>Explications :</p>\n<h3><em>mockResolvedValue()</em></h3>\n<p>On peut mocker le retour de la fonction <code class=\"language-text\">fetch</code> (qui est une <em>promise</em> pour rappel) grâce à la fonction <em>Jest</em> <code class=\"language-text\">mockResolvedValue</code>. Veuillez également noter que la fonction <code class=\"language-text\">json(</code>) est également une <em>promise</em>, et donc pensez à bien indiquer <code class=\"language-text\">async</code>!\nCela donne :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">.</span><span class=\"token function\">mockResolvedValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">ok</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">json</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/** JSON à retourner */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3><em>mockImplementation()</em></h3>\n<p>On a plus de souplesse avec la fonction <code class=\"language-text\">mockImplementation</code> qu’avec <code class=\"language-text\">mockResolvedValue</code>.\nEn effet, on va pouvoir définir en fonction de l’URL d’entrée de la fonction <code class=\"language-text\">fetch</code>, le mock à utiliser. C’est donc plus puissant que la précédente, qui autorise seulement à renvoyer toujours le meme résultat quelquesoit l’URL.</p>\n<p>On initialise le mock à chaque test :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> window<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">.</span><span class=\"token function\">mockImplementation</span><span class=\"token punctuation\">(</span>mockFetch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>`</code></pre></div>\n<p>avec <code class=\"language-text\">mockFetch</code> défini comme suit par exemple :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mockFetch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'/login'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">ok</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">json</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* Mock retour pour login */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'/checkout'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">ok</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">json</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* Mock retour pour checkout */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ainsi, on va pouvoir en fonction de l’URL passsée en paramètre (ici <em>login</em> ou <em>checkout</em>), définir le mock à utiliser de la fonction <code class=\"language-text\">fetch</code>.\nUne explication détaillée est présente sur ce superbe article (en anglais) : <a href=\"https://kentcdodds.com/blog/stop-mocking-fetch\">https://kentcdodds.com/blog/stop-mocking-fetch</a></p>\n<h3><em>fetch-mock</em></h3>\n<p><a href=\"http://www.wheresrhys.co.uk/fetch-mock/\"><em>Fetch-Mock</em></a> est une librairie qui va nous permettre de simplifier le fonctionnement ci-dessus. En effet, on va pouvoir définir le mapping entre URL et valeur de retour de la fonction <code class=\"language-text\">fetch</code> de manière plus simple qu’avec <code class=\"language-text\">mockImplementation</code>.</p>\n<ul>\n<li>Import de la librairie :</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> fetchMock <span class=\"token keyword\">from</span> <span class=\"token string\">\"fetch-mock\"</span>`</code></pre></div>\n<ul>\n<li>Mock de la fonction <code class=\"language-text\">fetch</code> :</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">fetchMock<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myUrl/login\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*retour attendu par fetch(sans la promise*/</span><span class=\"token punctuation\">}</span>`</code></pre></div>\n<p>Remarque : il est possible de debugger la librairie en ajoutant <code class=\"language-text\">DEBUG=fetch-mock*</code> en paramètre de <em>Jest</em>, dans le <code class=\"language-text\">package.json</code>.</p>\n<h2>Conclusion</h2>\n<p>Et voilà, nous avons vu différents moyens de mocker cette fonction <code class=\"language-text\">fetch</code>, et tester en isolation notre <em>frontend</em>. Dans notre projet, nous avons utilisé la troisième approche avec <em>fetch-mock</em>, mais <em>msw</em> peut être intéressant aussi, ce sera l’objet d’un autre post!</p>","frontmatter":{"title":"Mocker les appels API avec React, Jest et fetch-mock","date":"November 27, 2020","description":null}},"previous":{"fields":{"slug":"/2020-12-10- Brancher Jest à Sonar/"},"frontmatter":{"title":"Brancher Sonar à Jest pour afficher la couverture de code du frontend"}},"next":{"fields":{"slug":"/2020-05-05-les-8-meilleurs-livres-pour-etre-un-developpeur-web-au-top-en-2020/"},"frontmatter":{"title":"Les 8 meilleurs livres pour être un développeur WEB au top en 2020!"}}},"pageContext":{"id":"48590086-0905-56cd-a273-fb9ecc6eef3b","previousPostId":"74e3dc12-939a-5440-b45f-0cd53cc9de31","nextPostId":"8e09ee42-f8c5-55cb-9e9c-b99f8aa2bf04"}},"staticQueryHashes":["2841359383","916993862"],"slicesMap":{}}