{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-10-04-spring-security-et-single-page-application-du-parametrage-pour-que-ca-marche/","result":{"data":{"site":{"siteMetadata":{"title":"Effective Coding"}},"markdownRemark":{"id":"5fe42155-3afb-55f2-b4fe-8444616551e5","excerpt":"Introduction *Spring Security *est un framework qui permet l’authentification des utilisateurs, et de vérifier s’ils sont bien autorisés à accéder aux…","html":"<h2>Introduction</h2>\n<p>*Spring Security *est un framework qui permet l’authentification des utilisateurs, et de vérifier s’ils sont bien autorisés à accéder aux ressources voulues.<br>\nOn va constater dans cet article qu’il est nécessaire de paramétrer <em>Spring Security</em> afin de le faire fonctionner convenablement avec une <em>Single Page Application</em> (<em>Angular</em> ici).</p>\n<h2>Appel au service built-in Login</h2>\n<p>Spring Security vient avec un service d’authentification automatiquement, dont le endpoint est <em><strong>Login</strong></em>.<br>\nMalheureusement, celui-ci accepte uniquement le format en entrée de type <em><strong><a href=\"https://developer.mozilla.org/fr/docs/Web/API/FormData\">FormData</a></strong></em>, issus des formulaires HTML traditionnels. Or les SPA récents comme Angular envoient par défaut du JSON lors des appels REST. Il faut donc modifier cela pour envoyer du FormData:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> bodyFormData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbodyFormData<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbodyFormData<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span> bodyFormData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Paramétrage du Login avec succès</h2>\n<p>Lorsqu’une authentification est réalisée avec succès, Spring Security va par défaut effectuer une redirection vers / avec un code HTTP 302.<br>\nOr dans le cas d’une SPA, nous voulons simplement renvoyer un code HTTP 200 de succès, sans aucune redirection. C’est le front (SPA) qui réagira en fonction du code retourné.<br>\nPour cela, nous devons surcharger la classe Spring Security <em><a href=\"https://docs.spring.io/spring-security/site/docs/4.2.12.RELEASE/apidocs/org/springframework/security/web/authentication/SimpleUrlAuthenticationSuccessHandler.html\">SimpleUrlAuthenticationSuccessHandler</a></em> :</p>\n<p>Et ne pas oublier la configuration via la méthode <code class=\"language-text\">successHandler</code> de Spring Security: <code class=\"language-text\">successHandler(mySuccessHandler)</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySavedRequestAwareAuthenticationSuccessHandler</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SimpleUrlAuthenticationSuccessHandler</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAuthenticationSuccess</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Authentication</span> authentication<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Paramétrage de la redirection vers Login</h2>\n<p>Par défaut, lorsque l’utilisateur n’est pas autorisé à accéder à une ressource (non connecté par exemple), alors Spring Security redirige vers une page de Login prédéfinie via un code HTTP 302.<br>\nNous ne voulons pas cela dans une SPA : nous voulons renvoyer simplement un code HTTP 401, <em><strong>not authorized</strong></em> pour indiquer que l’utilisateur ne peut pas accéder à la ressource. Charge au front d’afficher une belle pas d’erreur, ou rediriger vers la page de login. Pour ce faire, nous devons surcharger la méthode <em>commence()</em> de l’interface Spring Security <em><a href=\"https://docs.spring.io/spring-security/site/docs/4.2.12.RELEASE/apidocs/org/springframework/security/web/AuthenticationEntryPoint.html\">AuthenticationEntryPoint</a></em>, comme ceci :</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * The Entry Point will not redirect to any sort of Login - it will return the 401\n */</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RestAuthenticationEntryPoint</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AuthenticationEntryPoint</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">commence</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">AuthenticationException</span> authException<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">sendError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SC_UNAUTHORIZED</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Unauthorized\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>et ne pas oublier la configuration via la méthode Spring Security <code class=\"language-text\">authenticationEntryPoint()</code> associée : <code class=\"language-text\">authenticationEntryPoint(restAuthenticationEntryPoint)</code></p>\n<h2>Conclusion</h2>\n<p>Voilà, vous avez maintenant une authentification qui fontionne dans le cadre d’une Single Page Application, youpi!<br>\nVous pouvez accéder à une application concrète qui met en pratique tout ce qu’on vient d’apprendre <a href=\"https://github.com/smaestri/sharebook/blob/master/backend/src/main/java/com/udemy/sharebook/configuration/WebSecurityConfig.java\">ici</a> A votre écoute pour tout commentaire ou remarque, je vous dis à très bientôt pour de nouvelles aventures!</p>","frontmatter":{"title":"Spring Security et Single Page Application : du paramétrage pour que ça marche!","date":"October 04, 2019","description":null}},"previous":{"fields":{"slug":"/2019-10-05-un-beau-spinner-genrique-en-angular/"},"frontmatter":{"title":"Un beau spinner générique en Angular"}},"next":null},"pageContext":{"id":"5fe42155-3afb-55f2-b4fe-8444616551e5","previousPostId":"ae3dee56-18f3-5ffc-ac60-86d044a95de9","nextPostId":null}},"staticQueryHashes":["2841359383","916993862"],"slicesMap":{}}