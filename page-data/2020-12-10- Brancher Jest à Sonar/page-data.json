{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-12-10- Brancher Jest à Sonar/","result":{"data":{"site":{"siteMetadata":{"title":"Effective Coding"}},"markdownRemark":{"id":"74e3dc12-939a-5440-b45f-0cd53cc9de31","excerpt":"Sonar est un outil de test de la qualité de code. Il se base sur un ensemble de règles qui ont une sévérité : code smell, bug, vulnerability, security hotspot…","html":"<p><a href=\"https://docs.sonarqube.org/latest/\">Sonar</a> est un outil de test de la qualité de code. Il se base sur un ensemble de règles qui ont une sévérité : <em>code smell</em>, <em>bug</em>, <em>vulnerability</em>, <em>security hotspot</em>.\nSonar permet aussi d’afficher les résultats de la couverture de code, c’est à dire le pourcentage de lignes de code qui est testée dans l’application. Il ne se charge cependant pas du calcul à proprement parler.</p>\n<p>Par exemple, pour un projet <em>JAVA</em> basé sur <em>Maven</em>, c’est en général le plugin Maven <em>Jacoco</em> qui se charge du calcul de la couverture. Il suffit de déclarer ce plug-in et le tour est joué.\nPour l’analyse de code du frontend (basé bien souvent sur le langage <em>Javascript</em>, ou <em>Typescript</em>), il va falloir effectuer une conversion des rapports de couverture de code depuis <a href=\"https://jestjs.io/en/\"><em>Jest</em></a> (l’outil de test frontend) vers Sonar. Nous allons voir comment.</p>\n<h2>Générer nos rapports de tests <em>Jest</em></h2>\n<h3>Flag coverage</h3>\n<p>Pour générer vos rapports de tests d’une application frontend via Jest, il faut ajouter le flag <code class=\"language-text\">coverage</code>. Cela va générer un répertoire coverage contenant tous les rapports de test au format Jest.\nLa commande pour executer les et les rapports associés est donc :</p>\n<p><code class=\"language-text\">npm run test --coverage</code></p>\n<h3>Flag watchAll</h3>\n<p>Nous ne voulons pas que nos tests s’executent en mode <em>watch</em> (bien que cette fonctionnalié peut s’avérer intéressante dans d’autres circonstances). Nouus allons donc la désactiver via la cxommande <code class=\"language-text\">watchAll=false</code> :\nNotre commande devient donc  :</p>\n<p><code class=\"language-text\">npm run test --coverage --watchAll=false</code></p>\n<h3>Conversion des rapports Jest vers Sonar</h3>\n<p>Nos rapports sont correctement générés dans le répertoire coverage, il faut donc les transformer en un format compréhensible par Sonar. C’est l’objet de la librairie <a href=\"https://github.com/3dmind/jest-sonar-reporter#readme\">jest-sonar-reporter</a>.\nIl suffit d’ajouter le flag <code class=\"language-text\">testResultsProcessor</code>.</p>\n<p>Notre commande devient donc:</p>\n<p><code class=\"language-text\">npm run test --coverage --watchAll=false --testResultsProcessor=jest-sonar-reporter</code></p>\n<p>Il faut aussi mettre à jour ou mettre à jour la configuration Sonar pour appeler le bon rapport :\n<code class=\"language-text\">sonar.testExecutionReportPaths=test-report.xml</code>\n(Par défaut le fichier généré par <em>jest-sonar-reporter</em> est <em>test-report.xml.</em>)</p>\n<p>Lancer l’analyse Sonar, et le tour est joué! Vous devriez avoir vos beaux rapports de couverture de code <em>Jest</em> dans <em>Sonar</em>!</p>","frontmatter":{"title":"Brancher Sonar à Jest pour afficher la couverture de code du frontend","date":"December 10, 2020","description":null}},"previous":{"fields":{"slug":"/2021-02-21-deploy-to-azure/2021-02-21-deploy-to-azure-app-services/"},"frontmatter":{"title":"Déployer une appli Spring-Boot vers le Cloud avec Azure App Services et les Github Actions"}},"next":{"fields":{"slug":"/2020-11-27- Mocker les appels API avec React, Jest et fetch-mock/"},"frontmatter":{"title":"Mocker les appels API avec React, Jest et fetch-mock"}}},"pageContext":{"id":"74e3dc12-939a-5440-b45f-0cd53cc9de31","previousPostId":"eaae743d-0ba5-52d1-a7e1-57ed2be2762d","nextPostId":"48590086-0905-56cd-a273-fb9ecc6eef3b"}},"staticQueryHashes":["2841359383","916993862"],"slicesMap":{}}