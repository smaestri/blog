---
title: Communication entre microservices avec Spring Boot, Spring Cloud, et Kafka
author: sylvain
type: post
date: 2019-11-10T17:31:54+00:00
url: /index.php/2019/11/10/communication-entre-microservices-avec-spring-cloud-et-kafka/
categories:
  - Backend

---
Dans ce POST, je vais vous montrer comment diff√©rents microservices peuvent communiquer gr√¢ce √† l'envoi de message asynchrones via Kafka.

L'asynchrone a de multiples avantages et notamment une am√©lioration des performance car on ne bloque plus en attendant la fin du traitement synchrone. On va se reposer sur une architecture Event Driven.

Nous allons utiliser la pile Spring Cloud pour la mise en place de nos microservices, avec notamment les service _Discover_ et G_ateway_, mais nous allons y revenir par la suite! De plus, nous allons utiliser [spring kafka][1] pour communiquer plus efficacement avec Kafka. Vous devez avoir donc [Kafka][2] et Zookeeper install√©s et lanc√©s sur votre ordinateur üòâ



## Pr√©sentation de l'application et des microservices

Nous allons mettre ceci en pratique √† travers une application toute simple : ajouter et lister des annonces immobili√®res. Il y a v√©rification de l'utilisateur qui publie, ainsi que l'envoi d'un email, chacun dans son propre microservice. L'annonce a diff√©rents statuts, en fonction o√π on se situe dans le cycle de vie de sa cr√©ation :

  * Cr√©ation de l'annonce au statut _PENDING_ par le microservice _ad_;
  * R√©ception de l'√©v√©nement _PENDING_ et v√©rification du user par le microservice _user_. Si ok, envoi √©v√©nement _USER_VALIDATED_;
  * R√©ception de l'√©v√©nement _USER_VALIDATED_ par le microservice _mailing_ et envoi √©v√©nement _MAIL_SENT_ si email envoy√© correctement;
  * R√©ception de l'√©v√©nement _MAIL_SENT_ et passage de l'annonce au statut _CREATED_ par le microservice _Ad_.

En plus de ces trois microservices _Ad_, _User_ et _Mailing_, nous avons les briques Gateway ([Spring Cloud Gateway][3]) et Discovery ([Netflix eureka][4]).

Petit rappel : la gateway permet d'agir en tant que proxy, c'est l'appelant unique qui redirigera vers le bon microservice. On utilise _spring cloud gateway_ pour cela ici.

Le service Discovery permet l'enregistrement des diff√©rents microservices (plut√¥t que chaque microservice ai connaissance de l'URL d'appel, ce qui n'est pas maintenable si l'URL vient √† changer). Ainsi on va pouvoir effectuer du load-balancing facilement : √† chaque ajout d'instance du microservice, celui-ci s'enregistre aupr√®s de Eureka et il devient disponible!

Cela se traduit par le sch√©ma suivant :<figure class="wp-block-image">

<img src="https://www.effectivecoding.fr/wp-content/uploads/2019/11/Untitled.png" alt="" class="wp-image-110" srcset="https://www.effectivecoding.fr/wp-content/uploads/2019/11/Untitled.png 606w, https://www.effectivecoding.fr/wp-content/uploads/2019/11/Untitled-300x206.png 300w" sizes="(max-width: 606px) 100vw, 606px" /> </figure> 

On peut voir si l'ensemble de nos microservices sont bien enregistr√©s aupr√®s de Eureka en se connectant sur _htttp://localhost:8761._ On obtient :<figure class="wp-block-image">

<img src="https://www.effectivecoding.fr/wp-content/uploads/2019/11/eureka-1024x502.png" alt="" class="wp-image-103" srcset="https://www.effectivecoding.fr/wp-content/uploads/2019/11/eureka-1024x502.png 1024w, https://www.effectivecoding.fr/wp-content/uploads/2019/11/eureka-300x147.png 300w, https://www.effectivecoding.fr/wp-content/uploads/2019/11/eureka-768x376.png 768w, https://www.effectivecoding.fr/wp-content/uploads/2019/11/eureka-1200x588.png 1200w, https://www.effectivecoding.fr/wp-content/uploads/2019/11/eureka.png 1292w" sizes="(max-width: 1024px) 100vw, 1024px" /> </figure> 

On voit bien que nos 4 microservices sont UP, on peut donc lancer notre frontend pour tester tout √ßa!

## Test de notre application

J'ai fais une petite application frontend en angular pour tester notre publication d'annonce, et lister celles-ci.

Il vous suffit de lancer l'application via _npm start_ (en ayant pris soin d'installer [node][5] et [angular cli][6]).

Vous cliquer sur Publier une annonce, vous remplisser les champs Titre etDescription, puis validez. L'annonces s'affiche! Le statut peut ne pas √™tre √† _CREATED_ (le temps que tous les traitement asynchrones s'effectuent) mais en rafra√Æchissant vous devriez voir appara√Ætre le statut _CREATED_ (si tout s'est bien pass√© :)!

Voil√† notre petit tout de la communication entre microservice via Kafka et Spring Cloud est termin√©. Comme toujours, vous pouvez trouver l'ensemble du code source [ici][7] . A bientot!

 [1]: https://spring.io/projects/spring-kafka
 [2]: https://kafka.apache.org/
 [3]: https://spring.io/projects/spring-cloud-gateway
 [4]: https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-eureka-server.html
 [5]: https://nodejs.org/en/
 [6]: https://cli.angular.io/
 [7]: https://github.com/smaestri/easyimmo