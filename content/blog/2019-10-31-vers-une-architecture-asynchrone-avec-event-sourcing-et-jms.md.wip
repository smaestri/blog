---
title: Vers une architecture asynchrone avec Event Sourcing et JMS
author: sylvain
type: post
date: 2019-10-31T21:49:40+00:00
url: /index.php/2019/10/31/vers-une-architecture-asynchrone-avec-event-sourcing-et-jms/
categories:
  - Backend
tags:
  - asynchrone
  - event-sourcing
  - jms
  - microservice

---
Nous allons voir dans ce post les inconv√©nients d'avoir une architecture 100% synchrone, et en quoi l'asynchrone a de multiples avantages, √† travers un exemple concret que j'ai pu mettre en ≈ìuvre dans le service fid√©lit√© d'un grand groupe hotellier.

Ce sera l'occasion de parler Event Sourcing, JMS et j'en passe! Bref, un post riche, alors acccrochez-vous bien!

### Inconv√©nients de reposer sur une architecture synchrone

Lors de la mise en place d'une application complexe, si on se repose uniquement sur des WebServices synchrones (par exemple REST), on peut conna√Ætre pas mal de d√©sagr√©ments : 

  * si un appel plante, alors toutes la cha√Æne plante ;
  * pas de possibilit√© de reprise sur erreur

Nous allons voir en quoi une architecture asynchrone permet de pallier aux deux points ci-dessus, √† travers un exemple concret, v√©cu dans un grand groupe hotellier fran√ßais dont je tairais le nom üòâ

### Exemple concret de mise en place d'une architecture asynchrone 

Les communications par message, par exemple JMS pour JAVA, permettent la mise en place d'architecture asynchrone. Nous ne parlerons pas de Kafka, qui permet aussi √©galement la mise en place d'une architecture asynchrone mais selon un m√©canisme diff√©rent bas√© sur des logs distribu√©s et persistant. 

Le besoin est le suivant : dans un contexte de fid√©lisation d'une grande entreprise h√¥teli√®re, lorsqu'un membre passe un certain statut (gold par exemple) il a la possibilit√© de donner un statut sup√©rieur √† un proche.

Nous avons un existant dans un monolithe o√π sont pr√©sents toutes les r√®gles de calcul de point et d'upgrade des membres. 

Pour ce besoin, nous souhaitons :

  * ajouter cette nouvelle fonctionnalit√© dans une brique √† part (microservice) pour ne pas encore accro√Ætre le monolithe;
  * reposer sur une architecture asynchrone afin d'avoir de la robustesse, et de la reprise sur erreur (nous verrons comment)

### Conception technique

Plut√¥t que de partir sur une architecture synchrone pouvant se r√©v√©ler dangereuse pour les points vus ci-dessus, nous allons partir sur de l'asynchrone. Nous allons d√©composer la fonctionnalit√© en deux use-cases:

  * quand le membre passe gold, alors il obtient la facult√© de donner un statut;
  * il peut ensuite donner le statut au membre qu'il d√©sire



#### 1 / Obtention d'un don de statut lorsque le membre passe GOLD<figure class="wp-block-image">

![][1] </figure> 

**Explications du diagramme de s√©quence**

Chaque √©l√©ment vertical repr√©sente une application Java autonome, bas√©e sur Spring Boot derni√®re version / JAVA 8 (sauf pour le monolithe, o√π bien entendu les technologies sont plus anciennes)

  * √âv√©nement _memberUpgraded_ lors d'un upgrade de membre (lorsqu'il a accumul√© suffisamment de points par exemple), stock√© dans une nouvelle table. Comme vous l'aurez devin√©, on va s'int√©resser au membre qui passe _gold_ pour notre besoin;
  * Mise en place d'un batch (_upgrade-batch_) qui √©coute cette table d'√©v√©nement, et qui publie un message dans un topic JMS _upgrade-topic_;
  * Nouveau microservice _ms-don_ qui √©coute ce topic JMS, et qui cr√©e le don de statut lorsque le nouveau membre est _GOLD_, dans une table sp√©cifique et locale au microservice (car pour rappel, dans une architecture √† base de microservices, chaque microservice poss√®de sa propre base de donn√©es). Le don est au statut CREATED.

#### 2 / Effectuer le DON<figure class="wp-block-image">

![][2] </figure> 

**Explications du diagramme de s√©quence**

  * Appel WS _donate_ via Service REST, avec en param√®tre les identifiants du donneur et b√©n√©ficiaire; ce WS va simplement ins√©rer un nouvel √©v√©nement StatusGiftCreated au statut PENDING, dans une table sp√©ciale (encore de l'Event Sourcing!). Ainsi, l'appel au WS est quasi instantan√© car il n'a quasiment rien √† traiter. De plus, on peut bien constater l'historique des dons effectu√©s, et on peut m√™me reconstruire l'√©tat pour un membre donn√© √† partir de tous ces √©v√©nements gr√¢ce √† l'Event sourcing.
  * Mise en place d'un CRON (interne au Microservice, mais aurait pu √™tre externalis√© pour une plus grande modularit√© et robustesse) qui √©coute cette table d'√©v√©nement afin d'effectuer plusieurs actions pour chacun d'eux (de fa√ßon transactionnelle):
      1. Appel service du monolithe pour upgrader le b√©n√©ficiaire;
      2. Envoi d'un email au donneur et b√©n√©ficiaire;
      3. Mise √† jour du don au statut CONSUMED

De plus, au cas o√π une de ces 2 actions se passe mal (timeout, coupure r√©seau, &#8230;), on va va pouvoir faire de la reprise sur erreur, ce qui est un atout additionnel √† la mise en place d'une architecture asynchrone.

Imaginons un instant ce qu'aurait √©t√© l'architecture en mode synchrone et sans microservice :<figure class="wp-block-image">

![][3] </figure> 

Au del√† de l'accroissement du monolithe, nous ne profitons pas de la reprise sur erreur, et les performances sont consid√©rablement d√©grad√©es car tout est fait est dans un seul WS!

J'esp√®re que ce post vous aura fait prendre conscience des avantages ind√©niables √† faire de l'asynchrone. Nous verrons dans un futur post en quoi Kafka permet de garder ce fonctionnement, et les avantages de l'asynchrone, tout en simplifiant les choses!

 [1]: https://www.websequencediagrams.com/cgi-bin/cdraw?lz=dGl0bGUgT2J0ZW50aW9uIGQndW4gZG9uIGRlIHN0YXR1dAoKTW9ub2xpdGhlLT4AAgk6IDxNZW1iZXJVcGdyYWRlZD4gc2F1dmVnYXJkw6kgZGFucyB0YWJsZSBkJ2V2ZW50Cgp1cGdhZGUtYmF0Y2gAPQ1FY291dGUAIA8AIA51AGAGLXRvcGljOiBFbnZvaSBNZXNzYWdlIEpNUwptcy1kb24AFxIAVgUAFQkAIAYgOiBTaSBNZW1icmUgR09MRCA6IENyw6lhAIF8BnUgZG9uCgoK&s=magazine
 [2]: https://www.websequencediagrams.com/cgi-bin/cdraw?lz=dGl0bGUgRWZmZWN0dWVyIGxlIGRvbgoKd2ViIHVzZXItPm1zLWRvbjogQXBwZWwgV1MgUkVTVCBkb25hdGUKABcGABsKPFN0YXR1c0dpZnRDcmVhdGVkPiBldmVudCBhdSBzdGF0dXQgUEVORElORwAzCQBjCDogcmV0b3VyIFdTAEYSQ1JPTj4gZWNvdXRlAEMPcwBBEW1vbm9saXRoZToAgScJdXBncmFkZSBCw6luw6lmaWNpYWlyZQoAIQkAgV4KAH4HT0sAMxxFbnZvaSBFbWFpbAAdJwCCPwdNaXNlIMOgIGpvdXIgZHUgZG9uAIIQC0NPTlNVTUVEAIJHEVNpIMOpY2hlYyByZXByb2R1aXQgYXBwZWxzIGNpLWRlc3N1cyBqdXNxdSfDoCAzIGZvaXMKCgoKCg&s=magazine
 [3]: https://www.websequencediagrams.com/cgi-bin/cdraw?lz=dGl0bGUgTGUgdG91dCBlbiBtb2RlIHN5bmNocm9uZQoKTW9ub2xpdGhlLT4AAgk6IE1lbWJyZSBwYXNzZSBnb2xkABEXSW5zZXJ0aW9uIHN0YXR1cyBnaWZ0CndlYi11c2VyAEYNV1MgUkVTVCBkb25hdGUAYBhpc2Ugw6Agam91ciBkdSBkb24gYXUAVQhjb25zdW1lAHUYVXBncmFkZSBkdSBiw6luw6lmaWNpYWlyAFUYRW52b2kgZHUgbWFpbACBfQwAgTgIOiBSZXRvdXIgT0svS08vVGltZW91dAoKbm90ZSBvdmVyIACCKAtzaSB1biBzZXVsIGRlIGNlcyBhcHBlbHMgw6ljaG91ZSwgYWxvcnMAgwQFZSBsYSBwaWxlABUIIQA-FlBhcyBkZSByZXByaXNlIHN1ciBlcnJldXIgcG9zc2libGUgKG91IGRpZmZpY2lsZW1lbnQhKQoKCg&s=magazine